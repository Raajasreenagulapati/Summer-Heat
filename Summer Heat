# Mock implementation for sending alerts (example with Twilio)
# Install Twilio: !pip install twilio

from twilio.rest import Client

# Twilio credentials (replace with your credentials)
account_sid = 'Sweety'
auth_token = '48763'
client = Client(account_sid, auth_token)

def send_alert(message, to_phone_number):
    from_phone_number = '6503835249'
    message = client.messages.create(
        body=message,
        from_=from_phone_number,
        to=to_phone_number
    )
    return message.sid

# Example alert
alert_message = "Heatwave Alert! Temperatures are expected to exceed 30°C today. Stay hydrated and indoors."
to_phone_number = '+1234567890'  # Replace with the recipient's phone number

# Send alert (uncomment to send)
# alert_sid = send_alert(alert_message, to_phone_number)
# print(f"Alert sent with SID: {alert_sid}")
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report

# Sample data: Load your weather data here
data_url = 'https://raw.githubusercontent.com/jbrownlee/Datasets/master/daily-min-temperatures.csv'
weather_data = pd.read_csv(data_url, parse_dates=['Date'])

# Preprocessing: Add a 'Heatwave' column based on a temperature threshold
weather_data['Year'] = weather_data['Date'].dt.year
weather_data['Month'] = weather_data['Date'].dt.month
weather_data['Day'] = weather_data['Date'].dt.day

# Define a heatwave as a day with a temperature above 30 degrees Celsius (example threshold)
weather_data['Heatwave'] = weather_data['Temp'] > 30

# Display the first few rows of the dataframe
weather_data.head()
# Plot the temperature data
plt.figure(figsize=(10, 5))
plt.plot(weather_data['Date'], weather_data['Temp'], label='Daily Temperature')
plt.axhline(y=30, color='r', linestyle='--', label='Heatwave Threshold')
plt.xlabel('Date')
plt.ylabel('Temperature (C)')
plt.title('Daily Temperatures')
plt.legend()
plt.show()

# Show the number of heatwave days per year
heatwave_days_per_year = weather_data.groupby('Year')['Heatwave'].sum()
heatwave_days_per_year.plot(kind='bar', figsize=(10, 5), title='Heatwave Days per Year')
plt.xlabel('Year')
plt.ylabel('Number of Heatwave Days')
plt.show()
# Prepare the dataset for modeling
features = weather_data[['Year', 'Month', 'Day', 'Temp']]
target = weather_data['Heatwave']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

# Train a Random Forest Classifier
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
print(classification_report(y_test, y_pred))
